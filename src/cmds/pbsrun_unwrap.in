#!/bin/sh
# Copyright (C) 1994-2021 Altair Engineering, Inc.
# For more information, contact Altair at www.altair.com.
#
# This file is part of both the OpenPBS software ("OpenPBS")
# and the PBS Professional ("PBS Pro") software.
#
# Open Source License Information:
#
# OpenPBS is free software. You can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# OpenPBS is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Commercial License Information:
#
# PBS Pro is commercially licensed software that shares a common core with
# the OpenPBS software.  For a copy of the commercial license terms and
# conditions, go to: (http://www.pbspro.com/agreement.html) or contact the
# Altair Legal Department.
#
# Altair's dual-license business model allows companies, individuals, and
# organizations to create proprietary derivative works of OpenPBS and
# distribute them - whether embedded or bundled with other software -
# under a commercial license agreement.
#
# Use of Altair's trademarks, including but not limited to "PBS™",
# "OpenPBS®", "PBS Professional®", and "PBS Pro™" and Altair's logos is
# subject to Altair's trademark licensing policies.

#
#

if [ $# -eq 1 ] && [ $1 = "--version" ]; then
   echo pbs_version = @PBS_VERSION@
   exit 0
fi

exec_cmd () {
  $* 2>/dev/null
  if [ $? -ne 0 ] ; then
	echo "$progname: FAILED:  \"$*\""
	exit 1
  else
	echo "$progname: EXECUTED: \"$*\""
  fi

}

. ${PBS_CONF_FILE:-@PBS_CONF_FILE@}
export PBS_TMPDIR="${PBS_TMPDIR:-${TMPDIR:-/var/tmp}}"

progname=`basename $0`
usage="$progname pbsrun.<keyword>"
usag2="$progname --version"

pbs_mpirun=$1

PBS_EXEC_BIN=${PBS_EXEC}/bin
PBS_LIB_PATH=${PBS_EXEC}/lib
if [ ! -d ${PBS_LIB_PATH} -a -d ${PBS_EXEC}/lib64 ] ; then
	PBS_LIB_PATH=${PBS_EXEC}/lib64
fi

# sanity checks
if [ "${PBS_EXEC_BIN}" =  "*" ] ; then
	echo "$progname: PBS_EXEC_BIN set to *!"
	exit 1
fi

if [ "${pbs_mpirun}" =  "*" ] ; then
	echo "$progname: pbs_mpirun set to *!"
	exit 1
fi


if [ $# -ne 1 ] ; then
   echo "$usage"
   echo "$usag2"
   exit 1
fi

if [ -h ${PBS_LIB_PATH}/MPI/${pbs_mpirun}.link ] ; then
   actual_mpirun=`ls -l ${PBS_LIB_PATH}/MPI/${pbs_mpirun}.link | \
					awk -F "->" '{print $2}'| tr -d ' '`
   if [ ! -x "$actual_mpirun" ] ; then
	echo "$progname: mpirun=$pbs_mpirun is not executable!"
	exit 1
   fi
else
   echo "$progname: did not find a ${PBS_LIB_PATH}/MPI/${pbs_mpirun}.link!"
   exit 1
fi
orig_mpirun_dir=`dirname $actual_mpirun`
orig_mpirun_name=`basename ${actual_mpirun} .actual`
# sanity check
if [ "${orig_mpirun_dir}" =  "*" ] || \
		[ "${orig_mpirun_name}" =  "*" ] ; then
	echo "$progname: orig_mpirun_dir or ori_mpirun_name set to *!"
	exit 1
fi
orig_mpirun="${orig_mpirun_dir}/${orig_mpirun_name}"


echo "$progname: saving a copy of $actual_mpirun to ${orig_mpirun}.back$$"
res=`exec_cmd cp $actual_mpirun ${orig_mpirun}.back$$`
echo $res
if [ `echo $res | egrep -c FAILED` -ne 0 ] ; then
        exit 1
fi

echo "$progname: restoring $actual_mpirun to $orig_mpirun"

res=`exec_cmd rm -f ${PBS_LIB_PATH}/MPI/${pbs_mpirun}.link`
echo $res
if [ `echo $res | egrep -c FAILED` -ne 0 ] ; then
        exit 1
fi

res=`exec_cmd rm -f $orig_mpirun`
echo $res
if [ `echo $res | egrep -c FAILED` -ne 0 ] ; then
        exit 1
fi

res=`exec_cmd rm -f ${PBS_EXEC_BIN}/${pbs_mpirun}`
echo $res
if [ `echo $res | egrep -c FAILED` -ne 0 ] ; then
        exit 1
fi

res=`exec_cmd rm -f ${PBS_LIB_PATH}/MPI/${pbs_mpirun}.init`
echo $res
if [ `echo $res | egrep -c FAILED` -ne 0 ] ; then
        exit 1
fi

res=`exec_cmd mv $actual_mpirun $orig_mpirun`
echo $res
if [ `echo $res | egrep -c FAILED` -ne 0 ] ; then
        exit 1
fi
