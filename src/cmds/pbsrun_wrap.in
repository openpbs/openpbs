#!/bin/sh
# Copyright (C) 1994-2021 Altair Engineering, Inc.
# For more information, contact Altair at www.altair.com.
#
# This file is part of both the OpenPBS software ("OpenPBS")
# and the PBS Professional ("PBS Pro") software.
#
# Open Source License Information:
#
# OpenPBS is free software. You can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# OpenPBS is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Commercial License Information:
#
# PBS Pro is commercially licensed software that shares a common core with
# the OpenPBS software.  For a copy of the commercial license terms and
# conditions, go to: (http://www.pbspro.com/agreement.html) or contact the
# Altair Legal Department.
#
# Altair's dual-license business model allows companies, individuals, and
# organizations to create proprietary derivative works of OpenPBS and
# distribute them - whether embedded or bundled with other software -
# under a commercial license agreement.
#
# Use of Altair's trademarks, including but not limited to "PBS™",
# "OpenPBS®", "PBS Professional®", and "PBS Pro™" and Altair's logos is
# subject to Altair's trademark licensing policies.

#

if [ $# -eq 1 ] && [ $1 = "--version" ]; then
   echo pbs_version = @PBS_VERSION@
   exit 0
fi

exec_cmd () {
  $* 2>/dev/null
  if [ $? -ne 0 ] ; then
        echo "$progname: FAILED:  \"$*\""
  else
        echo "$progname: EXECUTED: \"$*\""
  fi

}

. ${PBS_CONF_FILE:-@PBS_CONF_FILE@}
export PBS_TMPDIR="${PBS_TMPDIR:-${TMPDIR:-/var/tmp}}"

progname=`basename $0`
usage="$progname [-s] <path_to_actual_mpirun> pbsrun.<keyword>"
usag2="$progname --version"

options_list=`getopt s $*`
if [ $? != 0 ] ; then
        echo "$usage"
        echo "$usag2"
        exit 2
fi

set -- $options_list

strict_pbs=0
for i in $* ; do
        case $i in
        -s) strict_pbs=1; shift;;
        --) shift; break;;
        esac
done

PBS_EXEC_BIN=${PBS_EXEC}/bin
PBS_LIB_PATH=${PBS_EXEC}/lib
if [ ! -d ${PBS_LIB_PATH} -a -d ${PBS_EXEC}/lib64 ] ; then
	PBS_LIB_PATH=${PBS_EXEC}/lib64
fi

if [ $# -ne 2 ] ; then
   echo "$usage"
   echo "$usag2"
   exit 1
fi

actual_mpirun=$1
pbs_mpirun=$2

if [ "`echo $pbs_mpirun | awk -F. '{print $1}'`" != "pbsrun" ] ; then
   	echo "$usage"
   	echo "$usag2"
   	exit 1
fi

if [ "`echo $pbs_mpirun | awk -F. '{print $2}'`" == "" ] ; then
   	echo "$usage"
   	echo "$usag2"
   	exit 1
fi

if ! [ -x $actual_mpirun ] ; then
   echo "$progname: $actual_mpirun not exists and an executable!"
   exit 1
fi

actual_mpirun_name=`basename $actual_mpirun`
actual_mpirun_dir=`dirname $actual_mpirun`

# Save original mpirun script
res=`exec_cmd mv $actual_mpirun ${actual_mpirun}.actual`
echo $res
if [ `echo $res | egrep -c FAILED` -ne 0 ] ; then
	exit 1
fi

# Instantiate pbsrun
if [ "$pbs_mpirun" = "pbsrun.poe" ]; then
	res=`exec_cmd cp ${PBS_LIB_PATH}/MPI/${pbs_mpirun} ${PBS_EXEC_BIN}`
else
	res=`exec_cmd cp ${PBS_EXEC_BIN}/pbsrun ${PBS_EXEC_BIN}/${pbs_mpirun}`
fi
echo $res
if [ `echo $res | egrep -c FAILED` -ne 0 ] ; then
	exit 1
fi

res=`exec_cmd chmod 755 ${PBS_EXEC_BIN}/${pbs_mpirun}`
echo $res
if [ `echo $res | egrep -c FAILED` -ne 0 ] ; then
	exit 1
fi

res=`exec_cmd ln -s ${PBS_EXEC_BIN}/$pbs_mpirun $actual_mpirun`
echo $res
if [ `echo $res | egrep -c FAILED` -ne 0 ] ; then
	exit 1
fi

res=`exec_cmd ln -s ${actual_mpirun}.actual ${PBS_LIB_PATH}/MPI/${pbs_mpirun}.link`
echo $res
if [ `echo $res | egrep -c FAILED` -ne 0 ] ; then
	exit 1
fi

# Instantiate the *.init.in script to *.init
eval sed 's/^strict_pbs=.*/strict_pbs=${strict_pbs}/' ${PBS_LIB_PATH}/MPI/${pbs_mpirun}.init.in > ${PBS_LIB_PATH}/MPI/${pbs_mpirun}.init 2>/dev/null
if [ $? -ne 0 ] || [ ! -s ${PBS_LIB_PATH}/MPI/${pbs_mpirun}.init ] ; then
	echo "FAILED to instantiate ${PBS_LIB_PATH}/MPI/${pbs_mpirun}.init.in as ${PBS_LIB_PATH}/MPI/${pbs_mpirun}.init"
	exit 1
fi

res=`exec_cmd chmod 644  ${PBS_LIB_PATH}/MPI/${pbs_mpirun}.init`
echo $res
if [ `echo $res | egrep -c FAILED` -ne 0 ] ; then
	exit 1
fi
